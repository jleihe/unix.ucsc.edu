head	1.22;
access;
symbols;
locks;
comment	@.\" @;


1.22
date	2014.11.18.00.04.39;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.11.18.00.03.56;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.11.18.00.02.25;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.11.18.00.01.19;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.11.18.00.00.36;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.11.17.23.58.33;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.11.17.23.58.02;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.11.17.23.57.24;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.11.17.23.52.38;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.11.17.23.26.07;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.11.11.23.09.43;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.11.11.19.16.18;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.11.11.19.15.54;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.11.11.19.15.38;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.02.16.04.56.45;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.02.09.22.27.12;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.02.09.22.26.39;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.02.08.01.06.49;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.02.07.21.17.12;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.02.07.21.11.06;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.02.04.01.19.47;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.02.04.01.19.17;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@.so Tmac.mm-etc
.if t .Newcentury-fonts
.INITR* \n[.F]
.SIZE 12 14
.TITLE CMPS-112 Winter\~2012 Program\~4 "Functionally Ocaml"
.RCS "$Id: asg4-ocaml-dc.mm,v 1.21 2014-11-17 16:03:56-08 - - $"
.PWD
.URL
.EQ
delim $$
.EN
.H 1 "Overview"
In this assignment, 
you will implement a desk calculator in Ocaml, 
a language with strong static type checking.
Your program will be a strict subset of
.V= dc (1),
although it will not have all of its functions.
Begin by reading the man page for
.V= dc (1)
and experimenting with it.
Study its input format, output format, error messages, and exit status.
.P
Your program will read the single file (if specified) as does
.V= dc
and then read 
.V= stdin .
Implement the following 
.V= dc
functions\(::
.V= "+ - * / % \[ha] c d f l p s" .
Note that all of these letters are lower case.
Do not implement any of the upper case letters except
.V= Y .
Your program should probably respond in some reasonable way to
.V= Y ,
for debugging purposes, but does not have to.
.H 1 "Implementation Notes"
.ALX 1 ()
.LI
You
.E= "may not use"
the
.V= Num
or
.V= Big_int
modules in the Ocaml library.
Instead, you will implement your own version of bigint
by representing an integer by a product of a sign with a list
of integers.
The largest value of int in Ocaml is
.br
.ce 1
4,611,686,018,427,387,903 = 0x3FFF,FFFF,FFFF,FFFF = $2 sup 62 - 1$
.br
which is one bit less than what you might normally expect.
This is because one bit is used in each word for tagging.
.LI
The ideal representation therefore would be to use eight-digit numbers
in a list.
However, in order to make sure that the lists are working,
which is the point of the assignment,
you can store only one digit in each element of a list.
This is incredibly wasteful of storage,
but possible makes the representation easier.
The
.V= dc
utility actually uses character arrays with two decimal digits per byte.
.LI
Since arithmetic operations proceed from the lowest order digit to
the highest,
represent your numbers with the lowest order digit at the
front of the list and the leftmost digit at the end.
.LI
.E= "Do not"
use any loops in your program.
All iteration should be done via recursion,
and whenever possible,
by using higher-order functions like map.
.LI
First implement input and output of numbers.
Make sure your output duplicates
.V= dc
for very large numbers.
Note that an underscore prefixing a number
makes it negative.
The minus sign is strictly for subtraction.
.LI
Next, implement addition and subtraction.
To do this, you will need two functions
.V= add
and
.V= sub
which just compare signs and then call
.V= add'
or
.V= sub'
as appropriate to do the work on their absolute values.
When you subtract, make sure that the first argument is
always the larger one.
.LI
You will need a function 
.V= cmp
which returns a comparison value in the same way as does
.V= strcmp
in C.
This can move from the low order digits to the high order digits
tail recursively and stop at the end of the shorter list,
or by maintaining an actual comparison when the two lists turn out
to be the same length.
.LI
Make sure that you always canonicalize your answers by deleting
leading 0 digits.
This is only an issue with absolute subtraction,
since addition can only lengthen the number.
All other operations are implemented in terms of addition and
subtraction.
.LI
To implement multiplication, you add appropriate elements of
the right column.
To implement division, you add appropriate elements of the
left column.
The remainder is just whatever is left over after finishing the
division,
so your division function should return two results as a tuple,
namely the quotient and remainder, 
and the main module then ignores the one not wanted.
.LI
Exponentiation will then be trivial, since it is a simple matter 
to call the other functions.
.H 1 "What to Submit"
.V= Makefile ,
.V= bigint.ml ,
.V= bigint.mli ,
.V= maindc.ml ,
and
.V= scanner.mll .
Note that 
.V= scanner.ml
is a generated file and should be made by the 
.V= Makefile .
Also,
.V= dc.ml
is a debugging tool, not to be submitted.
Testing will be done on the 
.V= ocamlrun
script
.V= ocamldc ,
which should be runnable from the commandline.
.P
Program testing\(::
Test data will be fed to
.V= dc (1)
as well as to your program and the output will be checked with
.V= diff (1).
.FINISH
@


1.21
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.20 2014-11-17 16:02:25-08 - - $"
a52 2
.ds DECNR 4,611,686,018,427,387,903
.ds HEXNR \f[CR]0x3FFF,FFFF,FFFF,FFFF\f[P]
d54 1
a54 1
\*[DECNR] = \*[HEXNR] = $2 sup 62 - 1$
@


1.20
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.19 2014-11-17 16:01:19-08 - - $"
d53 2
d56 1
a56 2
4,611,686,018,427,387,903 \
= \f[CR]0x3FFF,FFFF,FFFF,FFFF\f[P] = $2 sup 62 - 1$
@


1.19
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.18 2014-11-17 16:00:36-08 - - $"
d55 1
a55 2
= \f(CB0x3FFF,FFFF,FFFF,FFFF\fP \
= $2 sup 62 - 1$
@


1.18
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.17 2014-11-17 15:58:33-08 - - $"
d54 3
a56 1
4,611,686,018,427,387,903 = 0x3FFF,FFFF,FFFF,FFFF = $2 sup 62 - 1$
@


1.17
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.16 2014-11-17 15:58:02-08 - - $"
d54 1
a54 1
4611686018427387903 = 0x3FFFFFFFFFFFFFFF = $2 sup 62 - 1$
@


1.16
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.15 2014-11-17 15:57:24-08 - - $"
d52 2
a53 1
.DS CB
d55 1
a55 1
.DE
@


1.15
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.14 2014-11-17 15:52:38-08 - - $"
d52 3
a54 3
.EQ
4611686018427387903 = 0x3FFFFFFFFFFFFFFF = 2 sup 62 - 1
.EN
@


1.14
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.13 2014-11-17 15:26:07-08 - - $"
d52 3
a54 1
4611686018427387903 ($ 2 sup 62 - 1$),
@


1.13
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.12 2014-11-11 15:09:43-08 - - $"
d52 1
a52 1
1073741823 ($ 2 sup 30 - 1$),
@


1.12
log
@-
@
text
@d5 2
a6 2
.TITLE CMPS-112 Winter\~2012 Program\~3 "Functionally Ocaml"
.RCS "$Id: asg4-ocaml-dc.mm,v 1.11 2014-11-11 11:16:18-08 - - $"
@


1.11
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.10 2014-11-11 11:15:54-08 - - $"
a125 3
Addition and subtraction will thus run at speed $ O ( n ) $.
Multiplication and division will run at speed $ O ( n log sub 2 n ) $.
.LI
@


1.10
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.9 2014-11-11 11:15:38-08 - - $"
a115 7
The ancient Egyptians used hieroglyphics for writing, 
and thus multiplication and division would have been difficult,
but they had a system where both operations were done only
by repeated addition.
These algorithms are about 5000 years old.
See the references in the accompanying files.
.LI
@


1.9
log
@-
@
text
@d5 2
a6 3
.TITLE CMPS-112 Winter\~2012 Program\~3 \
"Functional Programming and Ocaml"
.RCS "$Id: asg4-ocaml-dc.mm,v 1.8 2012-02-15 20:56:45-08 - - $"
@


1.8
log
@-
@
text
@d4 1
d7 3
a9 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.7 2012-02-09 14:27:12-08 - - $"
@


1.7
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.6 2012-02-09 14:26:39-08 - - $"
a135 8
And square root can be done using Newton's method.
See the sample function in this directory and then translate
it to using
.V= bigint s.
Note that you are dealing only with integers, 
So carefully check with
.V= dc
for the boundary cases.
@


1.6
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.5 2012-02-07 17:06:49-08 - - $"
d61 4
a68 3
The
.V= dc
utility actually uses character arrays with two decimal digits per byte.
@


1.5
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.4 2012-02-07 13:17:12-08 - - $"
a64 6
.LI
Since you will be adding numbers,
you will need to be able to store space for the carry bit in an int,
hence one digit less than the maxmimum.
And for ease in printing, a radix of $ 10 sup k $ is easiest
rather than a binary radix.
@


1.4
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.3 2012-02-07 13:11:06-08 - - $"
d57 4
a60 2
you can store only three digits in each element of a list.
This wastes storage, but possible makes the representation easier.
@


1.3
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.2 2012-02-03 17:19:47-08 - - $"
d122 1
a122 2
See the references in the accompanying file,
.V= egyptian-muldiv.html .
@


1.2
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.1 2012-02-03 17:19:17-08 - - $"
d29 1
a29 1
.V= "+ - * / % ^ c d f l p s" .
@


1.1
log
@-
@
text
@d6 1
a6 1
.RCS "$Id: asg4-ocaml-dc.mm,v 1.1 2011-04-26 13:29:36-07 - - $"
d39 3
a41 1
You may not use the
@
